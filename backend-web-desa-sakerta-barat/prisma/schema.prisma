// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  WARGA
  KADES
}

enum DocumentType {
  ID_CARD
  DRIVING_LICENSE
  FAMILY_CARD
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
}

enum MaritalStatus {
  KAWIN
  BELUM
  JANDA
  DUDA
}

enum RequestStatus {
  SUBMITTED
  APPROVED
  REJECTED
  SIGNED
  COMPLETED
  ARCHIVED
  REJECTED_BY_KADES
}

enum BloodType {
  A
  B
  AB
  O
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique @db.VarChar(100)
  password             String                @db.VarChar(100)
  username             String                @unique @db.VarChar(100)
  name                 String                @db.VarChar(100)
  firstName            String                @db.VarChar(50)
  lastName             String?               @db.VarChar(50)
  role                 Role                  @default(WARGA)
  isVerified           Boolean               @default(false)
  phoneNumber          String?
  profilePicture       String?               @db.Text
  token                String?               @db.VarChar(255)
  digitalSignature     String?               @db.Text
  signaturePin         String?               @db.VarChar(100)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  resident             Resident?
  printedLetters       PrintedLetter[]       @relation("PrintedBy")
  approvedLetters      LetterRequest[]       @relation("ApprovedBy")
  signedLetters        LetterRequest[]       @relation("SignedBy")
  completedLetters     LetterRequest[]       @relation("CompletedBy")
  changedStatusLetters LetterStatusHistory[] @relation("ChangedBy")
  archivedLetters      ArchivedLetter[]      @relation("ArchivedBy")

  LetterVersion         LetterVersion[]
  NotificationRecipient NotificationRecipient[]

  @@map("users")
}

model Resident {
  id                 Int             @id @default(autoincrement())
  nationalId         String          @unique @db.VarChar(16)
  name               String          @db.VarChar(100)
  dateOfBirth        DateTime
  idCardAddress      String          @db.VarChar(255)
  residentialAddress String          @db.VarChar(255)
  userId             Int             @unique
  user               User            @relation(fields: [userId], references: [id])
  religion           String?         @db.VarChar(50)
  maritalStatus      MaritalStatus?  @default(BELUM)
  occupation         String?         @db.VarChar(50)
  nationality        String?         @db.VarChar(50)
  placeOfBirth       String?         @db.VarChar(100)
  gender             Gender?
  familyCardNumber   String?         @db.VarChar(20)
  district           String?         @db.VarChar(50)
  regency            String?         @db.VarChar(50)
  province           String?         @db.VarChar(50)
  postalCode         String?         @db.VarChar(10)
  rt                 Int?
  rw                 Int?
  bloodType          BloodType?
  documents          Document[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  letterRequests     LetterRequest[]

  @@map("residents")
}

model Document {
  id          Int          @id @default(autoincrement())
  type        DocumentType
  fileUrl     String       @db.Text
  residentId  Int
  resident    Resident     @relation(fields: [residentId], references: [id])
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("documents")
}

model LetterCategory {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(50)
  description String?      @db.Text
  letterTypes LetterType[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("letter_categories")
}

model LetterType {
  id             Int             @id @default(autoincrement())
  categoryId     Int
  category       LetterCategory  @relation(fields: [categoryId], references: [id])
  name           String          @unique @db.VarChar(100)
  description    String?         @db.Text
  requirements   String?         @db.Text
  icon           String?
  template       String          @db.Text
  letterRequests LetterRequest[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("letter_types")
}

model LetterRequest {
  id                 Int                   @id @default(autoincrement())
  residentId         Int
  resident           Resident              @relation(fields: [residentId], references: [id])
  letterTypeId       Int
  letterType         LetterType            @relation(fields: [letterTypeId], references: [id])
  letterNumber       String?               @db.VarChar(50)
  requestDate        DateTime              @default(now())
  status             RequestStatus         @default(SUBMITTED)
  notes              String?               @db.Text
  rejectionReason    String?               @db.Text
  approvedLetterPath String?
  signedLetterPath   String?
  approvedAt         DateTime?
  approvedBy         Int?
  approvedByUser     User?                 @relation("ApprovedBy", fields: [approvedBy], references: [id])
  signedAt           DateTime?
  signedBy           Int?
  signedByUser       User?                 @relation("SignedBy", fields: [signedBy], references: [id])
  completedAt        DateTime?
  completedBy        Int?
  completedByUser    User?                 @relation("CompletedBy", fields: [completedBy], references: [id])
  attachments        Attachment[]
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  printedLetters     PrintedLetter[]
  statusHistory      LetterStatusHistory[]
  LetterVersion      LetterVersion[]
  ArchivedLetter     ArchivedLetter?

  @@map("letter_requests")
}

model Attachment {
  id              Int           @id @default(autoincrement())
  letterRequestId Int
  letterRequest   LetterRequest @relation(fields: [letterRequestId], references: [id])
  fileName        String        @db.VarChar(255)
  fileUrl         String?       @db.Text
  documentId      Int?
  document        Document?     @relation(fields: [documentId], references: [id])
  createdAt       DateTime      @default(now())

  @@map("attachments")
}

model PrintedLetter {
  id              Int           @id @default(autoincrement())
  letterRequestId Int
  letterRequest   LetterRequest @relation(fields: [letterRequestId], references: [id])
  printedAt       DateTime
  printedBy       Int
  printedByUser   User          @relation("PrintedBy", fields: [printedBy], references: [id])
  fileUrl         String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("printed_letters")
}

model LetterStatusHistory {
  id              Int           @id @default(autoincrement())
  letterRequestId Int
  letterRequest   LetterRequest @relation(fields: [letterRequestId], references: [id])
  status          RequestStatus
  changedBy       Int
  changedByUser   User          @relation("ChangedBy", fields: [changedBy], references: [id])
  notes           String?       @db.Text
  createdAt       DateTime      @default(now())

  @@map("letter_status_history")
}

model LetterVersion {
  id              Int           @id @default(autoincrement())
  letterRequestId Int
  letterRequest   LetterRequest @relation(fields: [letterRequestId], references: [id])
  versionNumber   Int
  content         String        @db.Text
  createdBy       Int
  createdByUser   User          @relation(fields: [createdBy], references: [id])
  createdAt       DateTime      @default(now())

  @@map("letter_versions")
}

model Notification {
  id         Int                     @id @default(autoincrement())
  content    String
  isRead     Boolean                 @default(false)
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  recipients NotificationRecipient[]

  @@map("notifications")
}

model NotificationRecipient {
  id             Int          @id @default(autoincrement())
  notificationId Int
  userId         Int
  isRead         Boolean      @default(false)
  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([notificationId, userId])
  @@map("notification_recipients")
}

model ArchivedLetter {
  id              Int           @id @default(autoincrement())
  letterRequestId Int           @unique
  letterRequest   LetterRequest @relation(fields: [letterRequestId], references: [id])
  archivedAt      DateTime      @default(now())
  archivedBy      Int
  archivedByUser  User          @relation("ArchivedBy", fields: [archivedBy], references: [id])
  archiveCategory String?       @db.VarChar(50)
  archiveNotes    String?       @db.Text
  fileUrl         String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("archived_letters")
}
